// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace chat {
class ChatProtocol;
struct ChatProtocolDefaultTypeInternal;
extern ChatProtocolDefaultTypeInternal _ChatProtocol_default_instance_;
class ChatProtocol_ClientBroadcast;
struct ChatProtocol_ClientBroadcastDefaultTypeInternal;
extern ChatProtocol_ClientBroadcastDefaultTypeInternal _ChatProtocol_ClientBroadcast_default_instance_;
class ChatProtocol_ClientPrivateMessage;
struct ChatProtocol_ClientPrivateMessageDefaultTypeInternal;
extern ChatProtocol_ClientPrivateMessageDefaultTypeInternal _ChatProtocol_ClientPrivateMessage_default_instance_;
class ChatProtocol_ClientStatusChange;
struct ChatProtocol_ClientStatusChangeDefaultTypeInternal;
extern ChatProtocol_ClientStatusChangeDefaultTypeInternal _ChatProtocol_ClientStatusChange_default_instance_;
class ChatProtocol_ClientUserInfo;
struct ChatProtocol_ClientUserInfoDefaultTypeInternal;
extern ChatProtocol_ClientUserInfoDefaultTypeInternal _ChatProtocol_ClientUserInfo_default_instance_;
class ChatProtocol_ServerBroadcast;
struct ChatProtocol_ServerBroadcastDefaultTypeInternal;
extern ChatProtocol_ServerBroadcastDefaultTypeInternal _ChatProtocol_ServerBroadcast_default_instance_;
class ChatProtocol_ServerPrivateMessage;
struct ChatProtocol_ServerPrivateMessageDefaultTypeInternal;
extern ChatProtocol_ServerPrivateMessageDefaultTypeInternal _ChatProtocol_ServerPrivateMessage_default_instance_;
class ChatProtocol_ServerStatusChange;
struct ChatProtocol_ServerStatusChangeDefaultTypeInternal;
extern ChatProtocol_ServerStatusChangeDefaultTypeInternal _ChatProtocol_ServerStatusChange_default_instance_;
class ChatProtocol_ServerUserInfo;
struct ChatProtocol_ServerUserInfoDefaultTypeInternal;
extern ChatProtocol_ServerUserInfoDefaultTypeInternal _ChatProtocol_ServerUserInfo_default_instance_;
class ChatProtocol_UserSignIn;
struct ChatProtocol_UserSignInDefaultTypeInternal;
extern ChatProtocol_UserSignInDefaultTypeInternal _ChatProtocol_UserSignIn_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::ChatProtocol* Arena::CreateMaybeMessage<::chat::ChatProtocol>(Arena*);
template<> ::chat::ChatProtocol_ClientBroadcast* Arena::CreateMaybeMessage<::chat::ChatProtocol_ClientBroadcast>(Arena*);
template<> ::chat::ChatProtocol_ClientPrivateMessage* Arena::CreateMaybeMessage<::chat::ChatProtocol_ClientPrivateMessage>(Arena*);
template<> ::chat::ChatProtocol_ClientStatusChange* Arena::CreateMaybeMessage<::chat::ChatProtocol_ClientStatusChange>(Arena*);
template<> ::chat::ChatProtocol_ClientUserInfo* Arena::CreateMaybeMessage<::chat::ChatProtocol_ClientUserInfo>(Arena*);
template<> ::chat::ChatProtocol_ServerBroadcast* Arena::CreateMaybeMessage<::chat::ChatProtocol_ServerBroadcast>(Arena*);
template<> ::chat::ChatProtocol_ServerPrivateMessage* Arena::CreateMaybeMessage<::chat::ChatProtocol_ServerPrivateMessage>(Arena*);
template<> ::chat::ChatProtocol_ServerStatusChange* Arena::CreateMaybeMessage<::chat::ChatProtocol_ServerStatusChange>(Arena*);
template<> ::chat::ChatProtocol_ServerUserInfo* Arena::CreateMaybeMessage<::chat::ChatProtocol_ServerUserInfo>(Arena*);
template<> ::chat::ChatProtocol_UserSignIn* Arena::CreateMaybeMessage<::chat::ChatProtocol_UserSignIn>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

enum ChatProtocol_ClientStatusChange_NewStatus : int {
  ChatProtocol_ClientStatusChange_NewStatus_ACTIVE = 0,
  ChatProtocol_ClientStatusChange_NewStatus_BUSY = 1,
  ChatProtocol_ClientStatusChange_NewStatus_INACTIVE = 2
};
bool ChatProtocol_ClientStatusChange_NewStatus_IsValid(int value);
constexpr ChatProtocol_ClientStatusChange_NewStatus ChatProtocol_ClientStatusChange_NewStatus_NewStatus_MIN = ChatProtocol_ClientStatusChange_NewStatus_ACTIVE;
constexpr ChatProtocol_ClientStatusChange_NewStatus ChatProtocol_ClientStatusChange_NewStatus_NewStatus_MAX = ChatProtocol_ClientStatusChange_NewStatus_INACTIVE;
constexpr int ChatProtocol_ClientStatusChange_NewStatus_NewStatus_ARRAYSIZE = ChatProtocol_ClientStatusChange_NewStatus_NewStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatProtocol_ClientStatusChange_NewStatus_descriptor();
template<typename T>
inline const std::string& ChatProtocol_ClientStatusChange_NewStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatProtocol_ClientStatusChange_NewStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatProtocol_ClientStatusChange_NewStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatProtocol_ClientStatusChange_NewStatus_descriptor(), enum_t_value);
}
inline bool ChatProtocol_ClientStatusChange_NewStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatProtocol_ClientStatusChange_NewStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatProtocol_ClientStatusChange_NewStatus>(
    ChatProtocol_ClientStatusChange_NewStatus_descriptor(), name, value);
}
enum ChatProtocol_ServerStatusChange_NewStatus : int {
  ChatProtocol_ServerStatusChange_NewStatus_ACTIVE = 0,
  ChatProtocol_ServerStatusChange_NewStatus_BUSY = 1,
  ChatProtocol_ServerStatusChange_NewStatus_INACTIVE = 2
};
bool ChatProtocol_ServerStatusChange_NewStatus_IsValid(int value);
constexpr ChatProtocol_ServerStatusChange_NewStatus ChatProtocol_ServerStatusChange_NewStatus_NewStatus_MIN = ChatProtocol_ServerStatusChange_NewStatus_ACTIVE;
constexpr ChatProtocol_ServerStatusChange_NewStatus ChatProtocol_ServerStatusChange_NewStatus_NewStatus_MAX = ChatProtocol_ServerStatusChange_NewStatus_INACTIVE;
constexpr int ChatProtocol_ServerStatusChange_NewStatus_NewStatus_ARRAYSIZE = ChatProtocol_ServerStatusChange_NewStatus_NewStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatProtocol_ServerStatusChange_NewStatus_descriptor();
template<typename T>
inline const std::string& ChatProtocol_ServerStatusChange_NewStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatProtocol_ServerStatusChange_NewStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatProtocol_ServerStatusChange_NewStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatProtocol_ServerStatusChange_NewStatus_descriptor(), enum_t_value);
}
inline bool ChatProtocol_ServerStatusChange_NewStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatProtocol_ServerStatusChange_NewStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatProtocol_ServerStatusChange_NewStatus>(
    ChatProtocol_ServerStatusChange_NewStatus_descriptor(), name, value);
}
enum ChatProtocol_MessageType : int {
  ChatProtocol_MessageType_SIGNIN = 0,
  ChatProtocol_MessageType_BROADCAST = 1,
  ChatProtocol_MessageType_PRIVATEMESSAGE = 2,
  ChatProtocol_MessageType_STATUS = 3,
  ChatProtocol_MessageType_USER = 4
};
bool ChatProtocol_MessageType_IsValid(int value);
constexpr ChatProtocol_MessageType ChatProtocol_MessageType_MessageType_MIN = ChatProtocol_MessageType_SIGNIN;
constexpr ChatProtocol_MessageType ChatProtocol_MessageType_MessageType_MAX = ChatProtocol_MessageType_USER;
constexpr int ChatProtocol_MessageType_MessageType_ARRAYSIZE = ChatProtocol_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatProtocol_MessageType_descriptor();
template<typename T>
inline const std::string& ChatProtocol_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatProtocol_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatProtocol_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatProtocol_MessageType_descriptor(), enum_t_value);
}
inline bool ChatProtocol_MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatProtocol_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatProtocol_MessageType>(
    ChatProtocol_MessageType_descriptor(), name, value);
}
// ===================================================================

class ChatProtocol_UserSignIn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatProtocol.UserSignIn) */ {
 public:
  inline ChatProtocol_UserSignIn() : ChatProtocol_UserSignIn(nullptr) {}
  ~ChatProtocol_UserSignIn() override;
  explicit constexpr ChatProtocol_UserSignIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatProtocol_UserSignIn(const ChatProtocol_UserSignIn& from);
  ChatProtocol_UserSignIn(ChatProtocol_UserSignIn&& from) noexcept
    : ChatProtocol_UserSignIn() {
    *this = ::std::move(from);
  }

  inline ChatProtocol_UserSignIn& operator=(const ChatProtocol_UserSignIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatProtocol_UserSignIn& operator=(ChatProtocol_UserSignIn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatProtocol_UserSignIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatProtocol_UserSignIn* internal_default_instance() {
    return reinterpret_cast<const ChatProtocol_UserSignIn*>(
               &_ChatProtocol_UserSignIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatProtocol_UserSignIn& a, ChatProtocol_UserSignIn& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatProtocol_UserSignIn* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatProtocol_UserSignIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatProtocol_UserSignIn* New() const final {
    return new ChatProtocol_UserSignIn();
  }

  ChatProtocol_UserSignIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatProtocol_UserSignIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatProtocol_UserSignIn& from);
  void MergeFrom(const ChatProtocol_UserSignIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatProtocol_UserSignIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatProtocol.UserSignIn";
  }
  protected:
  explicit ChatProtocol_UserSignIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kIPFieldNumber = 2,
  };
  // optional string UserName = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string IP = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatProtocol.UserSignIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatProtocol_ClientBroadcast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatProtocol.ClientBroadcast) */ {
 public:
  inline ChatProtocol_ClientBroadcast() : ChatProtocol_ClientBroadcast(nullptr) {}
  ~ChatProtocol_ClientBroadcast() override;
  explicit constexpr ChatProtocol_ClientBroadcast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatProtocol_ClientBroadcast(const ChatProtocol_ClientBroadcast& from);
  ChatProtocol_ClientBroadcast(ChatProtocol_ClientBroadcast&& from) noexcept
    : ChatProtocol_ClientBroadcast() {
    *this = ::std::move(from);
  }

  inline ChatProtocol_ClientBroadcast& operator=(const ChatProtocol_ClientBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatProtocol_ClientBroadcast& operator=(ChatProtocol_ClientBroadcast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatProtocol_ClientBroadcast& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatProtocol_ClientBroadcast* internal_default_instance() {
    return reinterpret_cast<const ChatProtocol_ClientBroadcast*>(
               &_ChatProtocol_ClientBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatProtocol_ClientBroadcast& a, ChatProtocol_ClientBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatProtocol_ClientBroadcast* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatProtocol_ClientBroadcast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatProtocol_ClientBroadcast* New() const final {
    return new ChatProtocol_ClientBroadcast();
  }

  ChatProtocol_ClientBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatProtocol_ClientBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatProtocol_ClientBroadcast& from);
  void MergeFrom(const ChatProtocol_ClientBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatProtocol_ClientBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatProtocol.ClientBroadcast";
  }
  protected:
  explicit ChatProtocol_ClientBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalMessageFieldNumber = 1,
  };
  // optional string globalMessage = 1;
  bool has_globalmessage() const;
  private:
  bool _internal_has_globalmessage() const;
  public:
  void clear_globalmessage();
  const std::string& globalmessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_globalmessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_globalmessage();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_globalmessage();
  void set_allocated_globalmessage(std::string* globalmessage);
  private:
  const std::string& _internal_globalmessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_globalmessage(const std::string& value);
  std::string* _internal_mutable_globalmessage();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatProtocol.ClientBroadcast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr globalmessage_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatProtocol_ClientPrivateMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatProtocol.ClientPrivateMessage) */ {
 public:
  inline ChatProtocol_ClientPrivateMessage() : ChatProtocol_ClientPrivateMessage(nullptr) {}
  ~ChatProtocol_ClientPrivateMessage() override;
  explicit constexpr ChatProtocol_ClientPrivateMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatProtocol_ClientPrivateMessage(const ChatProtocol_ClientPrivateMessage& from);
  ChatProtocol_ClientPrivateMessage(ChatProtocol_ClientPrivateMessage&& from) noexcept
    : ChatProtocol_ClientPrivateMessage() {
    *this = ::std::move(from);
  }

  inline ChatProtocol_ClientPrivateMessage& operator=(const ChatProtocol_ClientPrivateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatProtocol_ClientPrivateMessage& operator=(ChatProtocol_ClientPrivateMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatProtocol_ClientPrivateMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatProtocol_ClientPrivateMessage* internal_default_instance() {
    return reinterpret_cast<const ChatProtocol_ClientPrivateMessage*>(
               &_ChatProtocol_ClientPrivateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatProtocol_ClientPrivateMessage& a, ChatProtocol_ClientPrivateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatProtocol_ClientPrivateMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatProtocol_ClientPrivateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatProtocol_ClientPrivateMessage* New() const final {
    return new ChatProtocol_ClientPrivateMessage();
  }

  ChatProtocol_ClientPrivateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatProtocol_ClientPrivateMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatProtocol_ClientPrivateMessage& from);
  void MergeFrom(const ChatProtocol_ClientPrivateMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatProtocol_ClientPrivateMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatProtocol.ClientPrivateMessage";
  }
  protected:
  explicit ChatProtocol_ClientPrivateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetUserNameFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // optional string TargetUserName = 1;
  bool has_targetusername() const;
  private:
  bool _internal_has_targetusername() const;
  public:
  void clear_targetusername();
  const std::string& targetusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetusername();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_targetusername();
  void set_allocated_targetusername(std::string* targetusername);
  private:
  const std::string& _internal_targetusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetusername(const std::string& value);
  std::string* _internal_mutable_targetusername();
  public:

  // optional string Message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatProtocol.ClientPrivateMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetusername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatProtocol_ClientStatusChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatProtocol.ClientStatusChange) */ {
 public:
  inline ChatProtocol_ClientStatusChange() : ChatProtocol_ClientStatusChange(nullptr) {}
  ~ChatProtocol_ClientStatusChange() override;
  explicit constexpr ChatProtocol_ClientStatusChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatProtocol_ClientStatusChange(const ChatProtocol_ClientStatusChange& from);
  ChatProtocol_ClientStatusChange(ChatProtocol_ClientStatusChange&& from) noexcept
    : ChatProtocol_ClientStatusChange() {
    *this = ::std::move(from);
  }

  inline ChatProtocol_ClientStatusChange& operator=(const ChatProtocol_ClientStatusChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatProtocol_ClientStatusChange& operator=(ChatProtocol_ClientStatusChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatProtocol_ClientStatusChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatProtocol_ClientStatusChange* internal_default_instance() {
    return reinterpret_cast<const ChatProtocol_ClientStatusChange*>(
               &_ChatProtocol_ClientStatusChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatProtocol_ClientStatusChange& a, ChatProtocol_ClientStatusChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatProtocol_ClientStatusChange* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatProtocol_ClientStatusChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatProtocol_ClientStatusChange* New() const final {
    return new ChatProtocol_ClientStatusChange();
  }

  ChatProtocol_ClientStatusChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatProtocol_ClientStatusChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatProtocol_ClientStatusChange& from);
  void MergeFrom(const ChatProtocol_ClientStatusChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatProtocol_ClientStatusChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatProtocol.ClientStatusChange";
  }
  protected:
  explicit ChatProtocol_ClientStatusChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChatProtocol_ClientStatusChange_NewStatus NewStatus;
  static constexpr NewStatus ACTIVE =
    ChatProtocol_ClientStatusChange_NewStatus_ACTIVE;
  static constexpr NewStatus BUSY =
    ChatProtocol_ClientStatusChange_NewStatus_BUSY;
  static constexpr NewStatus INACTIVE =
    ChatProtocol_ClientStatusChange_NewStatus_INACTIVE;
  static inline bool NewStatus_IsValid(int value) {
    return ChatProtocol_ClientStatusChange_NewStatus_IsValid(value);
  }
  static constexpr NewStatus NewStatus_MIN =
    ChatProtocol_ClientStatusChange_NewStatus_NewStatus_MIN;
  static constexpr NewStatus NewStatus_MAX =
    ChatProtocol_ClientStatusChange_NewStatus_NewStatus_MAX;
  static constexpr int NewStatus_ARRAYSIZE =
    ChatProtocol_ClientStatusChange_NewStatus_NewStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NewStatus_descriptor() {
    return ChatProtocol_ClientStatusChange_NewStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& NewStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NewStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NewStatus_Name.");
    return ChatProtocol_ClientStatusChange_NewStatus_Name(enum_t_value);
  }
  static inline bool NewStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NewStatus* value) {
    return ChatProtocol_ClientStatusChange_NewStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chat.ChatProtocol.ClientStatusChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatProtocol_ClientUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatProtocol.ClientUserInfo) */ {
 public:
  inline ChatProtocol_ClientUserInfo() : ChatProtocol_ClientUserInfo(nullptr) {}
  ~ChatProtocol_ClientUserInfo() override;
  explicit constexpr ChatProtocol_ClientUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatProtocol_ClientUserInfo(const ChatProtocol_ClientUserInfo& from);
  ChatProtocol_ClientUserInfo(ChatProtocol_ClientUserInfo&& from) noexcept
    : ChatProtocol_ClientUserInfo() {
    *this = ::std::move(from);
  }

  inline ChatProtocol_ClientUserInfo& operator=(const ChatProtocol_ClientUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatProtocol_ClientUserInfo& operator=(ChatProtocol_ClientUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatProtocol_ClientUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatProtocol_ClientUserInfo* internal_default_instance() {
    return reinterpret_cast<const ChatProtocol_ClientUserInfo*>(
               &_ChatProtocol_ClientUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChatProtocol_ClientUserInfo& a, ChatProtocol_ClientUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatProtocol_ClientUserInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatProtocol_ClientUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatProtocol_ClientUserInfo* New() const final {
    return new ChatProtocol_ClientUserInfo();
  }

  ChatProtocol_ClientUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatProtocol_ClientUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatProtocol_ClientUserInfo& from);
  void MergeFrom(const ChatProtocol_ClientUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatProtocol_ClientUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatProtocol.ClientUserInfo";
  }
  protected:
  explicit ChatProtocol_ClientUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetUserNameFieldNumber = 1,
  };
  // optional string TargetUserName = 1;
  bool has_targetusername() const;
  private:
  bool _internal_has_targetusername() const;
  public:
  void clear_targetusername();
  const std::string& targetusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetusername();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_targetusername();
  void set_allocated_targetusername(std::string* targetusername);
  private:
  const std::string& _internal_targetusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetusername(const std::string& value);
  std::string* _internal_mutable_targetusername();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatProtocol.ClientUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetusername_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatProtocol_ServerBroadcast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatProtocol.ServerBroadcast) */ {
 public:
  inline ChatProtocol_ServerBroadcast() : ChatProtocol_ServerBroadcast(nullptr) {}
  ~ChatProtocol_ServerBroadcast() override;
  explicit constexpr ChatProtocol_ServerBroadcast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatProtocol_ServerBroadcast(const ChatProtocol_ServerBroadcast& from);
  ChatProtocol_ServerBroadcast(ChatProtocol_ServerBroadcast&& from) noexcept
    : ChatProtocol_ServerBroadcast() {
    *this = ::std::move(from);
  }

  inline ChatProtocol_ServerBroadcast& operator=(const ChatProtocol_ServerBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatProtocol_ServerBroadcast& operator=(ChatProtocol_ServerBroadcast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatProtocol_ServerBroadcast& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatProtocol_ServerBroadcast* internal_default_instance() {
    return reinterpret_cast<const ChatProtocol_ServerBroadcast*>(
               &_ChatProtocol_ServerBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChatProtocol_ServerBroadcast& a, ChatProtocol_ServerBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatProtocol_ServerBroadcast* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatProtocol_ServerBroadcast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatProtocol_ServerBroadcast* New() const final {
    return new ChatProtocol_ServerBroadcast();
  }

  ChatProtocol_ServerBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatProtocol_ServerBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatProtocol_ServerBroadcast& from);
  void MergeFrom(const ChatProtocol_ServerBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatProtocol_ServerBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatProtocol.ServerBroadcast";
  }
  protected:
  explicit ChatProtocol_ServerBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalMessageReceivedFieldNumber = 1,
  };
  // optional string GlobalMessageReceived = 1;
  bool has_globalmessagereceived() const;
  private:
  bool _internal_has_globalmessagereceived() const;
  public:
  void clear_globalmessagereceived();
  const std::string& globalmessagereceived() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_globalmessagereceived(ArgT0&& arg0, ArgT... args);
  std::string* mutable_globalmessagereceived();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_globalmessagereceived();
  void set_allocated_globalmessagereceived(std::string* globalmessagereceived);
  private:
  const std::string& _internal_globalmessagereceived() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_globalmessagereceived(const std::string& value);
  std::string* _internal_mutable_globalmessagereceived();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatProtocol.ServerBroadcast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr globalmessagereceived_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatProtocol_ServerPrivateMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatProtocol.ServerPrivateMessage) */ {
 public:
  inline ChatProtocol_ServerPrivateMessage() : ChatProtocol_ServerPrivateMessage(nullptr) {}
  ~ChatProtocol_ServerPrivateMessage() override;
  explicit constexpr ChatProtocol_ServerPrivateMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatProtocol_ServerPrivateMessage(const ChatProtocol_ServerPrivateMessage& from);
  ChatProtocol_ServerPrivateMessage(ChatProtocol_ServerPrivateMessage&& from) noexcept
    : ChatProtocol_ServerPrivateMessage() {
    *this = ::std::move(from);
  }

  inline ChatProtocol_ServerPrivateMessage& operator=(const ChatProtocol_ServerPrivateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatProtocol_ServerPrivateMessage& operator=(ChatProtocol_ServerPrivateMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatProtocol_ServerPrivateMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatProtocol_ServerPrivateMessage* internal_default_instance() {
    return reinterpret_cast<const ChatProtocol_ServerPrivateMessage*>(
               &_ChatProtocol_ServerPrivateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChatProtocol_ServerPrivateMessage& a, ChatProtocol_ServerPrivateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatProtocol_ServerPrivateMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatProtocol_ServerPrivateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatProtocol_ServerPrivateMessage* New() const final {
    return new ChatProtocol_ServerPrivateMessage();
  }

  ChatProtocol_ServerPrivateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatProtocol_ServerPrivateMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatProtocol_ServerPrivateMessage& from);
  void MergeFrom(const ChatProtocol_ServerPrivateMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatProtocol_ServerPrivateMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatProtocol.ServerPrivateMessage";
  }
  protected:
  explicit ChatProtocol_ServerPrivateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderuserNameFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // optional string SenderuserName = 1;
  bool has_senderusername() const;
  private:
  bool _internal_has_senderusername() const;
  public:
  void clear_senderusername();
  const std::string& senderusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_senderusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_senderusername();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_senderusername();
  void set_allocated_senderusername(std::string* senderusername);
  private:
  const std::string& _internal_senderusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_senderusername(const std::string& value);
  std::string* _internal_mutable_senderusername();
  public:

  // optional string Message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatProtocol.ServerPrivateMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr senderusername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatProtocol_ServerUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatProtocol.ServerUserInfo) */ {
 public:
  inline ChatProtocol_ServerUserInfo() : ChatProtocol_ServerUserInfo(nullptr) {}
  ~ChatProtocol_ServerUserInfo() override;
  explicit constexpr ChatProtocol_ServerUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatProtocol_ServerUserInfo(const ChatProtocol_ServerUserInfo& from);
  ChatProtocol_ServerUserInfo(ChatProtocol_ServerUserInfo&& from) noexcept
    : ChatProtocol_ServerUserInfo() {
    *this = ::std::move(from);
  }

  inline ChatProtocol_ServerUserInfo& operator=(const ChatProtocol_ServerUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatProtocol_ServerUserInfo& operator=(ChatProtocol_ServerUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatProtocol_ServerUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatProtocol_ServerUserInfo* internal_default_instance() {
    return reinterpret_cast<const ChatProtocol_ServerUserInfo*>(
               &_ChatProtocol_ServerUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChatProtocol_ServerUserInfo& a, ChatProtocol_ServerUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatProtocol_ServerUserInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatProtocol_ServerUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatProtocol_ServerUserInfo* New() const final {
    return new ChatProtocol_ServerUserInfo();
  }

  ChatProtocol_ServerUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatProtocol_ServerUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatProtocol_ServerUserInfo& from);
  void MergeFrom(const ChatProtocol_ServerUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatProtocol_ServerUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatProtocol.ServerUserInfo";
  }
  protected:
  explicit ChatProtocol_ServerUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kIPFieldNumber = 2,
  };
  // optional string UserName = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string IP = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatProtocol.ServerUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatProtocol_ServerStatusChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatProtocol.ServerStatusChange) */ {
 public:
  inline ChatProtocol_ServerStatusChange() : ChatProtocol_ServerStatusChange(nullptr) {}
  ~ChatProtocol_ServerStatusChange() override;
  explicit constexpr ChatProtocol_ServerStatusChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatProtocol_ServerStatusChange(const ChatProtocol_ServerStatusChange& from);
  ChatProtocol_ServerStatusChange(ChatProtocol_ServerStatusChange&& from) noexcept
    : ChatProtocol_ServerStatusChange() {
    *this = ::std::move(from);
  }

  inline ChatProtocol_ServerStatusChange& operator=(const ChatProtocol_ServerStatusChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatProtocol_ServerStatusChange& operator=(ChatProtocol_ServerStatusChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatProtocol_ServerStatusChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatProtocol_ServerStatusChange* internal_default_instance() {
    return reinterpret_cast<const ChatProtocol_ServerStatusChange*>(
               &_ChatProtocol_ServerStatusChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ChatProtocol_ServerStatusChange& a, ChatProtocol_ServerStatusChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatProtocol_ServerStatusChange* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatProtocol_ServerStatusChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatProtocol_ServerStatusChange* New() const final {
    return new ChatProtocol_ServerStatusChange();
  }

  ChatProtocol_ServerStatusChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatProtocol_ServerStatusChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatProtocol_ServerStatusChange& from);
  void MergeFrom(const ChatProtocol_ServerStatusChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatProtocol_ServerStatusChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatProtocol.ServerStatusChange";
  }
  protected:
  explicit ChatProtocol_ServerStatusChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChatProtocol_ServerStatusChange_NewStatus NewStatus;
  static constexpr NewStatus ACTIVE =
    ChatProtocol_ServerStatusChange_NewStatus_ACTIVE;
  static constexpr NewStatus BUSY =
    ChatProtocol_ServerStatusChange_NewStatus_BUSY;
  static constexpr NewStatus INACTIVE =
    ChatProtocol_ServerStatusChange_NewStatus_INACTIVE;
  static inline bool NewStatus_IsValid(int value) {
    return ChatProtocol_ServerStatusChange_NewStatus_IsValid(value);
  }
  static constexpr NewStatus NewStatus_MIN =
    ChatProtocol_ServerStatusChange_NewStatus_NewStatus_MIN;
  static constexpr NewStatus NewStatus_MAX =
    ChatProtocol_ServerStatusChange_NewStatus_NewStatus_MAX;
  static constexpr int NewStatus_ARRAYSIZE =
    ChatProtocol_ServerStatusChange_NewStatus_NewStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NewStatus_descriptor() {
    return ChatProtocol_ServerStatusChange_NewStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& NewStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NewStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NewStatus_Name.");
    return ChatProtocol_ServerStatusChange_NewStatus_Name(enum_t_value);
  }
  static inline bool NewStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NewStatus* value) {
    return ChatProtocol_ServerStatusChange_NewStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chat.ChatProtocol.ServerStatusChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatProtocol final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatProtocol) */ {
 public:
  inline ChatProtocol() : ChatProtocol(nullptr) {}
  ~ChatProtocol() override;
  explicit constexpr ChatProtocol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatProtocol(const ChatProtocol& from);
  ChatProtocol(ChatProtocol&& from) noexcept
    : ChatProtocol() {
    *this = ::std::move(from);
  }

  inline ChatProtocol& operator=(const ChatProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatProtocol& operator=(ChatProtocol&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatProtocol& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatProtocol* internal_default_instance() {
    return reinterpret_cast<const ChatProtocol*>(
               &_ChatProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ChatProtocol& a, ChatProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatProtocol* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatProtocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatProtocol* New() const final {
    return new ChatProtocol();
  }

  ChatProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatProtocol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatProtocol& from);
  void MergeFrom(const ChatProtocol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatProtocol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatProtocol";
  }
  protected:
  explicit ChatProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChatProtocol_UserSignIn UserSignIn;
  typedef ChatProtocol_ClientBroadcast ClientBroadcast;
  typedef ChatProtocol_ClientPrivateMessage ClientPrivateMessage;
  typedef ChatProtocol_ClientStatusChange ClientStatusChange;
  typedef ChatProtocol_ClientUserInfo ClientUserInfo;
  typedef ChatProtocol_ServerBroadcast ServerBroadcast;
  typedef ChatProtocol_ServerPrivateMessage ServerPrivateMessage;
  typedef ChatProtocol_ServerUserInfo ServerUserInfo;
  typedef ChatProtocol_ServerStatusChange ServerStatusChange;

  typedef ChatProtocol_MessageType MessageType;
  static constexpr MessageType SIGNIN =
    ChatProtocol_MessageType_SIGNIN;
  static constexpr MessageType BROADCAST =
    ChatProtocol_MessageType_BROADCAST;
  static constexpr MessageType PRIVATEMESSAGE =
    ChatProtocol_MessageType_PRIVATEMESSAGE;
  static constexpr MessageType STATUS =
    ChatProtocol_MessageType_STATUS;
  static constexpr MessageType USER =
    ChatProtocol_MessageType_USER;
  static inline bool MessageType_IsValid(int value) {
    return ChatProtocol_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    ChatProtocol_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    ChatProtocol_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    ChatProtocol_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return ChatProtocol_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return ChatProtocol_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MessageType* value) {
    return ChatProtocol_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kIPFieldNumber = 2,
  };
  // required string UserName = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required string IP = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatProtocol)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatProtocol_UserSignIn

// optional string UserName = 1;
inline bool ChatProtocol_UserSignIn::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatProtocol_UserSignIn::has_username() const {
  return _internal_has_username();
}
inline void ChatProtocol_UserSignIn::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatProtocol_UserSignIn::username() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.UserSignIn.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol_UserSignIn::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.UserSignIn.UserName)
}
inline std::string* ChatProtocol_UserSignIn::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.UserSignIn.UserName)
  return _internal_mutable_username();
}
inline const std::string& ChatProtocol_UserSignIn::_internal_username() const {
  return username_.Get();
}
inline void ChatProtocol_UserSignIn::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol_UserSignIn::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol_UserSignIn::release_username() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.UserSignIn.UserName)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol_UserSignIn::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.UserSignIn.UserName)
}

// optional string IP = 2;
inline bool ChatProtocol_UserSignIn::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChatProtocol_UserSignIn::has_ip() const {
  return _internal_has_ip();
}
inline void ChatProtocol_UserSignIn::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChatProtocol_UserSignIn::ip() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.UserSignIn.IP)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol_UserSignIn::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.UserSignIn.IP)
}
inline std::string* ChatProtocol_UserSignIn::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.UserSignIn.IP)
  return _internal_mutable_ip();
}
inline const std::string& ChatProtocol_UserSignIn::_internal_ip() const {
  return ip_.Get();
}
inline void ChatProtocol_UserSignIn::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol_UserSignIn::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol_UserSignIn::release_ip() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.UserSignIn.IP)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol_UserSignIn::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.UserSignIn.IP)
}

// -------------------------------------------------------------------

// ChatProtocol_ClientBroadcast

// optional string globalMessage = 1;
inline bool ChatProtocol_ClientBroadcast::_internal_has_globalmessage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatProtocol_ClientBroadcast::has_globalmessage() const {
  return _internal_has_globalmessage();
}
inline void ChatProtocol_ClientBroadcast::clear_globalmessage() {
  globalmessage_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatProtocol_ClientBroadcast::globalmessage() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.ClientBroadcast.globalMessage)
  return _internal_globalmessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol_ClientBroadcast::set_globalmessage(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 globalmessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.ClientBroadcast.globalMessage)
}
inline std::string* ChatProtocol_ClientBroadcast::mutable_globalmessage() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.ClientBroadcast.globalMessage)
  return _internal_mutable_globalmessage();
}
inline const std::string& ChatProtocol_ClientBroadcast::_internal_globalmessage() const {
  return globalmessage_.Get();
}
inline void ChatProtocol_ClientBroadcast::_internal_set_globalmessage(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  globalmessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ClientBroadcast::_internal_mutable_globalmessage() {
  _has_bits_[0] |= 0x00000001u;
  return globalmessage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ClientBroadcast::release_globalmessage() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.ClientBroadcast.globalMessage)
  if (!_internal_has_globalmessage()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return globalmessage_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol_ClientBroadcast::set_allocated_globalmessage(std::string* globalmessage) {
  if (globalmessage != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  globalmessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), globalmessage,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.ClientBroadcast.globalMessage)
}

// -------------------------------------------------------------------

// ChatProtocol_ClientPrivateMessage

// optional string TargetUserName = 1;
inline bool ChatProtocol_ClientPrivateMessage::_internal_has_targetusername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatProtocol_ClientPrivateMessage::has_targetusername() const {
  return _internal_has_targetusername();
}
inline void ChatProtocol_ClientPrivateMessage::clear_targetusername() {
  targetusername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatProtocol_ClientPrivateMessage::targetusername() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.ClientPrivateMessage.TargetUserName)
  return _internal_targetusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol_ClientPrivateMessage::set_targetusername(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 targetusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.ClientPrivateMessage.TargetUserName)
}
inline std::string* ChatProtocol_ClientPrivateMessage::mutable_targetusername() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.ClientPrivateMessage.TargetUserName)
  return _internal_mutable_targetusername();
}
inline const std::string& ChatProtocol_ClientPrivateMessage::_internal_targetusername() const {
  return targetusername_.Get();
}
inline void ChatProtocol_ClientPrivateMessage::_internal_set_targetusername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  targetusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ClientPrivateMessage::_internal_mutable_targetusername() {
  _has_bits_[0] |= 0x00000001u;
  return targetusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ClientPrivateMessage::release_targetusername() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.ClientPrivateMessage.TargetUserName)
  if (!_internal_has_targetusername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return targetusername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol_ClientPrivateMessage::set_allocated_targetusername(std::string* targetusername) {
  if (targetusername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  targetusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetusername,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.ClientPrivateMessage.TargetUserName)
}

// optional string Message = 2;
inline bool ChatProtocol_ClientPrivateMessage::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChatProtocol_ClientPrivateMessage::has_message() const {
  return _internal_has_message();
}
inline void ChatProtocol_ClientPrivateMessage::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChatProtocol_ClientPrivateMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.ClientPrivateMessage.Message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol_ClientPrivateMessage::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.ClientPrivateMessage.Message)
}
inline std::string* ChatProtocol_ClientPrivateMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.ClientPrivateMessage.Message)
  return _internal_mutable_message();
}
inline const std::string& ChatProtocol_ClientPrivateMessage::_internal_message() const {
  return message_.Get();
}
inline void ChatProtocol_ClientPrivateMessage::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ClientPrivateMessage::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ClientPrivateMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.ClientPrivateMessage.Message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol_ClientPrivateMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.ClientPrivateMessage.Message)
}

// -------------------------------------------------------------------

// ChatProtocol_ClientStatusChange

// -------------------------------------------------------------------

// ChatProtocol_ClientUserInfo

// optional string TargetUserName = 1;
inline bool ChatProtocol_ClientUserInfo::_internal_has_targetusername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatProtocol_ClientUserInfo::has_targetusername() const {
  return _internal_has_targetusername();
}
inline void ChatProtocol_ClientUserInfo::clear_targetusername() {
  targetusername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatProtocol_ClientUserInfo::targetusername() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.ClientUserInfo.TargetUserName)
  return _internal_targetusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol_ClientUserInfo::set_targetusername(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 targetusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.ClientUserInfo.TargetUserName)
}
inline std::string* ChatProtocol_ClientUserInfo::mutable_targetusername() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.ClientUserInfo.TargetUserName)
  return _internal_mutable_targetusername();
}
inline const std::string& ChatProtocol_ClientUserInfo::_internal_targetusername() const {
  return targetusername_.Get();
}
inline void ChatProtocol_ClientUserInfo::_internal_set_targetusername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  targetusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ClientUserInfo::_internal_mutable_targetusername() {
  _has_bits_[0] |= 0x00000001u;
  return targetusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ClientUserInfo::release_targetusername() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.ClientUserInfo.TargetUserName)
  if (!_internal_has_targetusername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return targetusername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol_ClientUserInfo::set_allocated_targetusername(std::string* targetusername) {
  if (targetusername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  targetusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetusername,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.ClientUserInfo.TargetUserName)
}

// -------------------------------------------------------------------

// ChatProtocol_ServerBroadcast

// optional string GlobalMessageReceived = 1;
inline bool ChatProtocol_ServerBroadcast::_internal_has_globalmessagereceived() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatProtocol_ServerBroadcast::has_globalmessagereceived() const {
  return _internal_has_globalmessagereceived();
}
inline void ChatProtocol_ServerBroadcast::clear_globalmessagereceived() {
  globalmessagereceived_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatProtocol_ServerBroadcast::globalmessagereceived() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.ServerBroadcast.GlobalMessageReceived)
  return _internal_globalmessagereceived();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol_ServerBroadcast::set_globalmessagereceived(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 globalmessagereceived_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.ServerBroadcast.GlobalMessageReceived)
}
inline std::string* ChatProtocol_ServerBroadcast::mutable_globalmessagereceived() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.ServerBroadcast.GlobalMessageReceived)
  return _internal_mutable_globalmessagereceived();
}
inline const std::string& ChatProtocol_ServerBroadcast::_internal_globalmessagereceived() const {
  return globalmessagereceived_.Get();
}
inline void ChatProtocol_ServerBroadcast::_internal_set_globalmessagereceived(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  globalmessagereceived_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ServerBroadcast::_internal_mutable_globalmessagereceived() {
  _has_bits_[0] |= 0x00000001u;
  return globalmessagereceived_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ServerBroadcast::release_globalmessagereceived() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.ServerBroadcast.GlobalMessageReceived)
  if (!_internal_has_globalmessagereceived()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return globalmessagereceived_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol_ServerBroadcast::set_allocated_globalmessagereceived(std::string* globalmessagereceived) {
  if (globalmessagereceived != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  globalmessagereceived_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), globalmessagereceived,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.ServerBroadcast.GlobalMessageReceived)
}

// -------------------------------------------------------------------

// ChatProtocol_ServerPrivateMessage

// optional string SenderuserName = 1;
inline bool ChatProtocol_ServerPrivateMessage::_internal_has_senderusername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatProtocol_ServerPrivateMessage::has_senderusername() const {
  return _internal_has_senderusername();
}
inline void ChatProtocol_ServerPrivateMessage::clear_senderusername() {
  senderusername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatProtocol_ServerPrivateMessage::senderusername() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.ServerPrivateMessage.SenderuserName)
  return _internal_senderusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol_ServerPrivateMessage::set_senderusername(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 senderusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.ServerPrivateMessage.SenderuserName)
}
inline std::string* ChatProtocol_ServerPrivateMessage::mutable_senderusername() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.ServerPrivateMessage.SenderuserName)
  return _internal_mutable_senderusername();
}
inline const std::string& ChatProtocol_ServerPrivateMessage::_internal_senderusername() const {
  return senderusername_.Get();
}
inline void ChatProtocol_ServerPrivateMessage::_internal_set_senderusername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  senderusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ServerPrivateMessage::_internal_mutable_senderusername() {
  _has_bits_[0] |= 0x00000001u;
  return senderusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ServerPrivateMessage::release_senderusername() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.ServerPrivateMessage.SenderuserName)
  if (!_internal_has_senderusername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return senderusername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol_ServerPrivateMessage::set_allocated_senderusername(std::string* senderusername) {
  if (senderusername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  senderusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), senderusername,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.ServerPrivateMessage.SenderuserName)
}

// optional string Message = 2;
inline bool ChatProtocol_ServerPrivateMessage::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChatProtocol_ServerPrivateMessage::has_message() const {
  return _internal_has_message();
}
inline void ChatProtocol_ServerPrivateMessage::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChatProtocol_ServerPrivateMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.ServerPrivateMessage.Message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol_ServerPrivateMessage::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.ServerPrivateMessage.Message)
}
inline std::string* ChatProtocol_ServerPrivateMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.ServerPrivateMessage.Message)
  return _internal_mutable_message();
}
inline const std::string& ChatProtocol_ServerPrivateMessage::_internal_message() const {
  return message_.Get();
}
inline void ChatProtocol_ServerPrivateMessage::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ServerPrivateMessage::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ServerPrivateMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.ServerPrivateMessage.Message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol_ServerPrivateMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.ServerPrivateMessage.Message)
}

// -------------------------------------------------------------------

// ChatProtocol_ServerUserInfo

// optional string UserName = 1;
inline bool ChatProtocol_ServerUserInfo::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatProtocol_ServerUserInfo::has_username() const {
  return _internal_has_username();
}
inline void ChatProtocol_ServerUserInfo::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatProtocol_ServerUserInfo::username() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.ServerUserInfo.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol_ServerUserInfo::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.ServerUserInfo.UserName)
}
inline std::string* ChatProtocol_ServerUserInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.ServerUserInfo.UserName)
  return _internal_mutable_username();
}
inline const std::string& ChatProtocol_ServerUserInfo::_internal_username() const {
  return username_.Get();
}
inline void ChatProtocol_ServerUserInfo::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ServerUserInfo::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ServerUserInfo::release_username() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.ServerUserInfo.UserName)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol_ServerUserInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.ServerUserInfo.UserName)
}

// optional string IP = 2;
inline bool ChatProtocol_ServerUserInfo::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChatProtocol_ServerUserInfo::has_ip() const {
  return _internal_has_ip();
}
inline void ChatProtocol_ServerUserInfo::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChatProtocol_ServerUserInfo::ip() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.ServerUserInfo.IP)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol_ServerUserInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.ServerUserInfo.IP)
}
inline std::string* ChatProtocol_ServerUserInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.ServerUserInfo.IP)
  return _internal_mutable_ip();
}
inline const std::string& ChatProtocol_ServerUserInfo::_internal_ip() const {
  return ip_.Get();
}
inline void ChatProtocol_ServerUserInfo::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ServerUserInfo::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol_ServerUserInfo::release_ip() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.ServerUserInfo.IP)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol_ServerUserInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.ServerUserInfo.IP)
}

// -------------------------------------------------------------------

// ChatProtocol_ServerStatusChange

// -------------------------------------------------------------------

// ChatProtocol

// required string UserName = 1;
inline bool ChatProtocol::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatProtocol::has_username() const {
  return _internal_has_username();
}
inline void ChatProtocol::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatProtocol::username() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.UserName)
}
inline std::string* ChatProtocol::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.UserName)
  return _internal_mutable_username();
}
inline const std::string& ChatProtocol::_internal_username() const {
  return username_.Get();
}
inline void ChatProtocol::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol::release_username() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.UserName)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.UserName)
}

// required string IP = 2;
inline bool ChatProtocol::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChatProtocol::has_ip() const {
  return _internal_has_ip();
}
inline void ChatProtocol::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChatProtocol::ip() const {
  // @@protoc_insertion_point(field_get:chat.ChatProtocol.IP)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatProtocol::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChatProtocol.IP)
}
inline std::string* ChatProtocol::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:chat.ChatProtocol.IP)
  return _internal_mutable_ip();
}
inline const std::string& ChatProtocol::_internal_ip() const {
  return ip_.Get();
}
inline void ChatProtocol::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatProtocol::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatProtocol::release_ip() {
  // @@protoc_insertion_point(field_release:chat.ChatProtocol.IP)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatProtocol::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chat.ChatProtocol.IP)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chat::ChatProtocol_ClientStatusChange_NewStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::ChatProtocol_ClientStatusChange_NewStatus>() {
  return ::chat::ChatProtocol_ClientStatusChange_NewStatus_descriptor();
}
template <> struct is_proto_enum< ::chat::ChatProtocol_ServerStatusChange_NewStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::ChatProtocol_ServerStatusChange_NewStatus>() {
  return ::chat::ChatProtocol_ServerStatusChange_NewStatus_descriptor();
}
template <> struct is_proto_enum< ::chat::ChatProtocol_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::ChatProtocol_MessageType>() {
  return ::chat::ChatProtocol_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
