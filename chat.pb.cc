// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace chat {
constexpr ChatProtocol_UserSignIn::ChatProtocol_UserSignIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChatProtocol_UserSignInDefaultTypeInternal {
  constexpr ChatProtocol_UserSignInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProtocol_UserSignInDefaultTypeInternal() {}
  union {
    ChatProtocol_UserSignIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProtocol_UserSignInDefaultTypeInternal _ChatProtocol_UserSignIn_default_instance_;
constexpr ChatProtocol_ClientBroadcast::ChatProtocol_ClientBroadcast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : globalmessage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChatProtocol_ClientBroadcastDefaultTypeInternal {
  constexpr ChatProtocol_ClientBroadcastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProtocol_ClientBroadcastDefaultTypeInternal() {}
  union {
    ChatProtocol_ClientBroadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProtocol_ClientBroadcastDefaultTypeInternal _ChatProtocol_ClientBroadcast_default_instance_;
constexpr ChatProtocol_ClientPrivateMessage::ChatProtocol_ClientPrivateMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : targetusername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChatProtocol_ClientPrivateMessageDefaultTypeInternal {
  constexpr ChatProtocol_ClientPrivateMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProtocol_ClientPrivateMessageDefaultTypeInternal() {}
  union {
    ChatProtocol_ClientPrivateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProtocol_ClientPrivateMessageDefaultTypeInternal _ChatProtocol_ClientPrivateMessage_default_instance_;
constexpr ChatProtocol_ClientStatusChange::ChatProtocol_ClientStatusChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChatProtocol_ClientStatusChangeDefaultTypeInternal {
  constexpr ChatProtocol_ClientStatusChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProtocol_ClientStatusChangeDefaultTypeInternal() {}
  union {
    ChatProtocol_ClientStatusChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProtocol_ClientStatusChangeDefaultTypeInternal _ChatProtocol_ClientStatusChange_default_instance_;
constexpr ChatProtocol_ClientUserInfo::ChatProtocol_ClientUserInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : targetusername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChatProtocol_ClientUserInfoDefaultTypeInternal {
  constexpr ChatProtocol_ClientUserInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProtocol_ClientUserInfoDefaultTypeInternal() {}
  union {
    ChatProtocol_ClientUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProtocol_ClientUserInfoDefaultTypeInternal _ChatProtocol_ClientUserInfo_default_instance_;
constexpr ChatProtocol_ServerBroadcast::ChatProtocol_ServerBroadcast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : globalmessagereceived_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChatProtocol_ServerBroadcastDefaultTypeInternal {
  constexpr ChatProtocol_ServerBroadcastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProtocol_ServerBroadcastDefaultTypeInternal() {}
  union {
    ChatProtocol_ServerBroadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProtocol_ServerBroadcastDefaultTypeInternal _ChatProtocol_ServerBroadcast_default_instance_;
constexpr ChatProtocol_ServerPrivateMessage::ChatProtocol_ServerPrivateMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : senderusername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChatProtocol_ServerPrivateMessageDefaultTypeInternal {
  constexpr ChatProtocol_ServerPrivateMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProtocol_ServerPrivateMessageDefaultTypeInternal() {}
  union {
    ChatProtocol_ServerPrivateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProtocol_ServerPrivateMessageDefaultTypeInternal _ChatProtocol_ServerPrivateMessage_default_instance_;
constexpr ChatProtocol_ServerUserInfo::ChatProtocol_ServerUserInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChatProtocol_ServerUserInfoDefaultTypeInternal {
  constexpr ChatProtocol_ServerUserInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProtocol_ServerUserInfoDefaultTypeInternal() {}
  union {
    ChatProtocol_ServerUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProtocol_ServerUserInfoDefaultTypeInternal _ChatProtocol_ServerUserInfo_default_instance_;
constexpr ChatProtocol_ServerStatusChange::ChatProtocol_ServerStatusChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChatProtocol_ServerStatusChangeDefaultTypeInternal {
  constexpr ChatProtocol_ServerStatusChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProtocol_ServerStatusChangeDefaultTypeInternal() {}
  union {
    ChatProtocol_ServerStatusChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProtocol_ServerStatusChangeDefaultTypeInternal _ChatProtocol_ServerStatusChange_default_instance_;
constexpr ChatProtocol::ChatProtocol(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChatProtocolDefaultTypeInternal {
  constexpr ChatProtocolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatProtocolDefaultTypeInternal() {}
  union {
    ChatProtocol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatProtocolDefaultTypeInternal _ChatProtocol_default_instance_;
}  // namespace chat
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chat_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_chat_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_UserSignIn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_UserSignIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_UserSignIn, username_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_UserSignIn, ip_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ClientBroadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ClientBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ClientBroadcast, globalmessage_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ClientPrivateMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ClientPrivateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ClientPrivateMessage, targetusername_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ClientPrivateMessage, message_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ClientStatusChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ClientUserInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ClientUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ClientUserInfo, targetusername_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerBroadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerBroadcast, globalmessagereceived_),
  0,
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerPrivateMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerPrivateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerPrivateMessage, senderusername_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerPrivateMessage, message_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerUserInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerUserInfo, username_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerUserInfo, ip_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol_ServerStatusChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol, username_),
  PROTOBUF_FIELD_OFFSET(::chat::ChatProtocol, ip_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::chat::ChatProtocol_UserSignIn)},
  { 9, 15, sizeof(::chat::ChatProtocol_ClientBroadcast)},
  { 16, 23, sizeof(::chat::ChatProtocol_ClientPrivateMessage)},
  { 25, -1, sizeof(::chat::ChatProtocol_ClientStatusChange)},
  { 30, 36, sizeof(::chat::ChatProtocol_ClientUserInfo)},
  { 37, 43, sizeof(::chat::ChatProtocol_ServerBroadcast)},
  { 44, 51, sizeof(::chat::ChatProtocol_ServerPrivateMessage)},
  { 53, 60, sizeof(::chat::ChatProtocol_ServerUserInfo)},
  { 62, -1, sizeof(::chat::ChatProtocol_ServerStatusChange)},
  { 67, 74, sizeof(::chat::ChatProtocol)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChatProtocol_UserSignIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChatProtocol_ClientBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChatProtocol_ClientPrivateMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChatProtocol_ClientStatusChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChatProtocol_ClientUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChatProtocol_ServerBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChatProtocol_ServerPrivateMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChatProtocol_ServerUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChatProtocol_ServerStatusChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chat::_ChatProtocol_default_instance_),
};

const char descriptor_table_protodef_chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nchat.proto\022\004chat\"\362\004\n\014ChatProtocol\022\020\n\010U"
  "serName\030\001 \002(\t\022\n\n\002IP\030\002 \002(\t\032*\n\nUserSignIn\022"
  "\020\n\010UserName\030\001 \001(\t\022\n\n\002IP\030\002 \001(\t\032(\n\017ClientB"
  "roadcast\022\025\n\rglobalMessage\030\001 \001(\t\032\?\n\024Clien"
  "tPrivateMessage\022\026\n\016TargetUserName\030\001 \001(\t\022"
  "\017\n\007Message\030\002 \001(\t\032E\n\022ClientStatusChange\"/"
  "\n\tNewStatus\022\n\n\006ACTIVE\020\000\022\010\n\004BUSY\020\001\022\014\n\010INA"
  "CTIVE\020\002\032(\n\016ClientUserInfo\022\026\n\016TargetUserN"
  "ame\030\001 \001(\t\0320\n\017ServerBroadcast\022\035\n\025GlobalMe"
  "ssageReceived\030\001 \001(\t\032\?\n\024ServerPrivateMess"
  "age\022\026\n\016SenderuserName\030\001 \001(\t\022\017\n\007Message\030\002"
  " \001(\t\032.\n\016ServerUserInfo\022\020\n\010UserName\030\001 \001(\t"
  "\022\n\n\002IP\030\002 \001(\t\032E\n\022ServerStatusChange\"/\n\tNe"
  "wStatus\022\n\n\006ACTIVE\020\000\022\010\n\004BUSY\020\001\022\014\n\010INACTIV"
  "E\020\002\"R\n\013MessageType\022\n\n\006SIGNIN\020\000\022\r\n\tBROADC"
  "AST\020\001\022\022\n\016PRIVATEMESSAGE\020\002\022\n\n\006STATUS\020\003\022\010\n"
  "\004USER\020\004"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto = {
  false, false, 647, descriptor_table_protodef_chat_2eproto, "chat.proto", 
  &descriptor_table_chat_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_chat_2eproto::offsets,
  file_level_metadata_chat_2eproto, file_level_enum_descriptors_chat_2eproto, file_level_service_descriptors_chat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_chat_2eproto_getter() {
  return &descriptor_table_chat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_chat_2eproto(&descriptor_table_chat_2eproto);
namespace chat {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatProtocol_ClientStatusChange_NewStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[0];
}
bool ChatProtocol_ClientStatusChange_NewStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChatProtocol_ClientStatusChange_NewStatus ChatProtocol_ClientStatusChange::ACTIVE;
constexpr ChatProtocol_ClientStatusChange_NewStatus ChatProtocol_ClientStatusChange::BUSY;
constexpr ChatProtocol_ClientStatusChange_NewStatus ChatProtocol_ClientStatusChange::INACTIVE;
constexpr ChatProtocol_ClientStatusChange_NewStatus ChatProtocol_ClientStatusChange::NewStatus_MIN;
constexpr ChatProtocol_ClientStatusChange_NewStatus ChatProtocol_ClientStatusChange::NewStatus_MAX;
constexpr int ChatProtocol_ClientStatusChange::NewStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatProtocol_ServerStatusChange_NewStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[1];
}
bool ChatProtocol_ServerStatusChange_NewStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChatProtocol_ServerStatusChange_NewStatus ChatProtocol_ServerStatusChange::ACTIVE;
constexpr ChatProtocol_ServerStatusChange_NewStatus ChatProtocol_ServerStatusChange::BUSY;
constexpr ChatProtocol_ServerStatusChange_NewStatus ChatProtocol_ServerStatusChange::INACTIVE;
constexpr ChatProtocol_ServerStatusChange_NewStatus ChatProtocol_ServerStatusChange::NewStatus_MIN;
constexpr ChatProtocol_ServerStatusChange_NewStatus ChatProtocol_ServerStatusChange::NewStatus_MAX;
constexpr int ChatProtocol_ServerStatusChange::NewStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatProtocol_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[2];
}
bool ChatProtocol_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChatProtocol_MessageType ChatProtocol::SIGNIN;
constexpr ChatProtocol_MessageType ChatProtocol::BROADCAST;
constexpr ChatProtocol_MessageType ChatProtocol::PRIVATEMESSAGE;
constexpr ChatProtocol_MessageType ChatProtocol::STATUS;
constexpr ChatProtocol_MessageType ChatProtocol::USER;
constexpr ChatProtocol_MessageType ChatProtocol::MessageType_MIN;
constexpr ChatProtocol_MessageType ChatProtocol::MessageType_MAX;
constexpr int ChatProtocol::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ChatProtocol_UserSignIn::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatProtocol_UserSignIn>()._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChatProtocol_UserSignIn::ChatProtocol_UserSignIn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatProtocol.UserSignIn)
}
ChatProtocol_UserSignIn::ChatProtocol_UserSignIn(const ChatProtocol_UserSignIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat.ChatProtocol.UserSignIn)
}

void ChatProtocol_UserSignIn::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatProtocol_UserSignIn::~ChatProtocol_UserSignIn() {
  // @@protoc_insertion_point(destructor:chat.ChatProtocol.UserSignIn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatProtocol_UserSignIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatProtocol_UserSignIn::ArenaDtor(void* object) {
  ChatProtocol_UserSignIn* _this = reinterpret_cast< ChatProtocol_UserSignIn* >(object);
  (void)_this;
}
void ChatProtocol_UserSignIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProtocol_UserSignIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProtocol_UserSignIn::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatProtocol.UserSignIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProtocol_UserSignIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string UserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.UserSignIn.UserName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string IP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.UserSignIn.IP");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatProtocol_UserSignIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatProtocol.UserSignIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.UserSignIn.UserName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // optional string IP = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.UserSignIn.IP");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatProtocol.UserSignIn)
  return target;
}

size_t ChatProtocol_UserSignIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatProtocol.UserSignIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string UserName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string IP = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatProtocol_UserSignIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatProtocol.UserSignIn)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatProtocol_UserSignIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatProtocol_UserSignIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatProtocol.UserSignIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatProtocol.UserSignIn)
    MergeFrom(*source);
  }
}

void ChatProtocol_UserSignIn::MergeFrom(const ChatProtocol_UserSignIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatProtocol.UserSignIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip(from._internal_ip());
    }
  }
}

void ChatProtocol_UserSignIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatProtocol.UserSignIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatProtocol_UserSignIn::CopyFrom(const ChatProtocol_UserSignIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatProtocol.UserSignIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProtocol_UserSignIn::IsInitialized() const {
  return true;
}

void ChatProtocol_UserSignIn::InternalSwap(ChatProtocol_UserSignIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, GetArenaForAllocation(),
      &other->username_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProtocol_UserSignIn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[0]);
}

// ===================================================================

class ChatProtocol_ClientBroadcast::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatProtocol_ClientBroadcast>()._has_bits_);
  static void set_has_globalmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChatProtocol_ClientBroadcast::ChatProtocol_ClientBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatProtocol.ClientBroadcast)
}
ChatProtocol_ClientBroadcast::ChatProtocol_ClientBroadcast(const ChatProtocol_ClientBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  globalmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_globalmessage()) {
    globalmessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_globalmessage(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat.ChatProtocol.ClientBroadcast)
}

void ChatProtocol_ClientBroadcast::SharedCtor() {
globalmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatProtocol_ClientBroadcast::~ChatProtocol_ClientBroadcast() {
  // @@protoc_insertion_point(destructor:chat.ChatProtocol.ClientBroadcast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatProtocol_ClientBroadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  globalmessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatProtocol_ClientBroadcast::ArenaDtor(void* object) {
  ChatProtocol_ClientBroadcast* _this = reinterpret_cast< ChatProtocol_ClientBroadcast* >(object);
  (void)_this;
}
void ChatProtocol_ClientBroadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProtocol_ClientBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProtocol_ClientBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatProtocol.ClientBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    globalmessage_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProtocol_ClientBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string globalMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_globalmessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.ClientBroadcast.globalMessage");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatProtocol_ClientBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatProtocol.ClientBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string globalMessage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_globalmessage().data(), static_cast<int>(this->_internal_globalmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.ClientBroadcast.globalMessage");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_globalmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatProtocol.ClientBroadcast)
  return target;
}

size_t ChatProtocol_ClientBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatProtocol.ClientBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string globalMessage = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_globalmessage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatProtocol_ClientBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatProtocol.ClientBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatProtocol_ClientBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatProtocol_ClientBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatProtocol.ClientBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatProtocol.ClientBroadcast)
    MergeFrom(*source);
  }
}

void ChatProtocol_ClientBroadcast::MergeFrom(const ChatProtocol_ClientBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatProtocol.ClientBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_globalmessage()) {
    _internal_set_globalmessage(from._internal_globalmessage());
  }
}

void ChatProtocol_ClientBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatProtocol.ClientBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatProtocol_ClientBroadcast::CopyFrom(const ChatProtocol_ClientBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatProtocol.ClientBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProtocol_ClientBroadcast::IsInitialized() const {
  return true;
}

void ChatProtocol_ClientBroadcast::InternalSwap(ChatProtocol_ClientBroadcast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &globalmessage_, GetArenaForAllocation(),
      &other->globalmessage_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProtocol_ClientBroadcast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[1]);
}

// ===================================================================

class ChatProtocol_ClientPrivateMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatProtocol_ClientPrivateMessage>()._has_bits_);
  static void set_has_targetusername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChatProtocol_ClientPrivateMessage::ChatProtocol_ClientPrivateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatProtocol.ClientPrivateMessage)
}
ChatProtocol_ClientPrivateMessage::ChatProtocol_ClientPrivateMessage(const ChatProtocol_ClientPrivateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  targetusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_targetusername()) {
    targetusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_targetusername(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat.ChatProtocol.ClientPrivateMessage)
}

void ChatProtocol_ClientPrivateMessage::SharedCtor() {
targetusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatProtocol_ClientPrivateMessage::~ChatProtocol_ClientPrivateMessage() {
  // @@protoc_insertion_point(destructor:chat.ChatProtocol.ClientPrivateMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatProtocol_ClientPrivateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  targetusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatProtocol_ClientPrivateMessage::ArenaDtor(void* object) {
  ChatProtocol_ClientPrivateMessage* _this = reinterpret_cast< ChatProtocol_ClientPrivateMessage* >(object);
  (void)_this;
}
void ChatProtocol_ClientPrivateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProtocol_ClientPrivateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProtocol_ClientPrivateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatProtocol.ClientPrivateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      targetusername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProtocol_ClientPrivateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string TargetUserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_targetusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.ClientPrivateMessage.TargetUserName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.ClientPrivateMessage.Message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatProtocol_ClientPrivateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatProtocol.ClientPrivateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string TargetUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_targetusername().data(), static_cast<int>(this->_internal_targetusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.ClientPrivateMessage.TargetUserName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_targetusername(), target);
  }

  // optional string Message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.ClientPrivateMessage.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatProtocol.ClientPrivateMessage)
  return target;
}

size_t ChatProtocol_ClientPrivateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatProtocol.ClientPrivateMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string TargetUserName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_targetusername());
    }

    // optional string Message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatProtocol_ClientPrivateMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatProtocol.ClientPrivateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatProtocol_ClientPrivateMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatProtocol_ClientPrivateMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatProtocol.ClientPrivateMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatProtocol.ClientPrivateMessage)
    MergeFrom(*source);
  }
}

void ChatProtocol_ClientPrivateMessage::MergeFrom(const ChatProtocol_ClientPrivateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatProtocol.ClientPrivateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_targetusername(from._internal_targetusername());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message(from._internal_message());
    }
  }
}

void ChatProtocol_ClientPrivateMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatProtocol.ClientPrivateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatProtocol_ClientPrivateMessage::CopyFrom(const ChatProtocol_ClientPrivateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatProtocol.ClientPrivateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProtocol_ClientPrivateMessage::IsInitialized() const {
  return true;
}

void ChatProtocol_ClientPrivateMessage::InternalSwap(ChatProtocol_ClientPrivateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &targetusername_, GetArenaForAllocation(),
      &other->targetusername_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProtocol_ClientPrivateMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[2]);
}

// ===================================================================

class ChatProtocol_ClientStatusChange::_Internal {
 public:
};

ChatProtocol_ClientStatusChange::ChatProtocol_ClientStatusChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatProtocol.ClientStatusChange)
}
ChatProtocol_ClientStatusChange::ChatProtocol_ClientStatusChange(const ChatProtocol_ClientStatusChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chat.ChatProtocol.ClientStatusChange)
}

void ChatProtocol_ClientStatusChange::SharedCtor() {
}

ChatProtocol_ClientStatusChange::~ChatProtocol_ClientStatusChange() {
  // @@protoc_insertion_point(destructor:chat.ChatProtocol.ClientStatusChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatProtocol_ClientStatusChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChatProtocol_ClientStatusChange::ArenaDtor(void* object) {
  ChatProtocol_ClientStatusChange* _this = reinterpret_cast< ChatProtocol_ClientStatusChange* >(object);
  (void)_this;
}
void ChatProtocol_ClientStatusChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProtocol_ClientStatusChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProtocol_ClientStatusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatProtocol.ClientStatusChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProtocol_ClientStatusChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatProtocol_ClientStatusChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatProtocol.ClientStatusChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatProtocol.ClientStatusChange)
  return target;
}

size_t ChatProtocol_ClientStatusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatProtocol.ClientStatusChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatProtocol_ClientStatusChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatProtocol.ClientStatusChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatProtocol_ClientStatusChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatProtocol_ClientStatusChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatProtocol.ClientStatusChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatProtocol.ClientStatusChange)
    MergeFrom(*source);
  }
}

void ChatProtocol_ClientStatusChange::MergeFrom(const ChatProtocol_ClientStatusChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatProtocol.ClientStatusChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChatProtocol_ClientStatusChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatProtocol.ClientStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatProtocol_ClientStatusChange::CopyFrom(const ChatProtocol_ClientStatusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatProtocol.ClientStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProtocol_ClientStatusChange::IsInitialized() const {
  return true;
}

void ChatProtocol_ClientStatusChange::InternalSwap(ChatProtocol_ClientStatusChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProtocol_ClientStatusChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[3]);
}

// ===================================================================

class ChatProtocol_ClientUserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatProtocol_ClientUserInfo>()._has_bits_);
  static void set_has_targetusername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChatProtocol_ClientUserInfo::ChatProtocol_ClientUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatProtocol.ClientUserInfo)
}
ChatProtocol_ClientUserInfo::ChatProtocol_ClientUserInfo(const ChatProtocol_ClientUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  targetusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_targetusername()) {
    targetusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_targetusername(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat.ChatProtocol.ClientUserInfo)
}

void ChatProtocol_ClientUserInfo::SharedCtor() {
targetusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatProtocol_ClientUserInfo::~ChatProtocol_ClientUserInfo() {
  // @@protoc_insertion_point(destructor:chat.ChatProtocol.ClientUserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatProtocol_ClientUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  targetusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatProtocol_ClientUserInfo::ArenaDtor(void* object) {
  ChatProtocol_ClientUserInfo* _this = reinterpret_cast< ChatProtocol_ClientUserInfo* >(object);
  (void)_this;
}
void ChatProtocol_ClientUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProtocol_ClientUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProtocol_ClientUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatProtocol.ClientUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    targetusername_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProtocol_ClientUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string TargetUserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_targetusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.ClientUserInfo.TargetUserName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatProtocol_ClientUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatProtocol.ClientUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string TargetUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_targetusername().data(), static_cast<int>(this->_internal_targetusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.ClientUserInfo.TargetUserName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_targetusername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatProtocol.ClientUserInfo)
  return target;
}

size_t ChatProtocol_ClientUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatProtocol.ClientUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string TargetUserName = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetusername());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatProtocol_ClientUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatProtocol.ClientUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatProtocol_ClientUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatProtocol_ClientUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatProtocol.ClientUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatProtocol.ClientUserInfo)
    MergeFrom(*source);
  }
}

void ChatProtocol_ClientUserInfo::MergeFrom(const ChatProtocol_ClientUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatProtocol.ClientUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_targetusername()) {
    _internal_set_targetusername(from._internal_targetusername());
  }
}

void ChatProtocol_ClientUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatProtocol.ClientUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatProtocol_ClientUserInfo::CopyFrom(const ChatProtocol_ClientUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatProtocol.ClientUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProtocol_ClientUserInfo::IsInitialized() const {
  return true;
}

void ChatProtocol_ClientUserInfo::InternalSwap(ChatProtocol_ClientUserInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &targetusername_, GetArenaForAllocation(),
      &other->targetusername_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProtocol_ClientUserInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[4]);
}

// ===================================================================

class ChatProtocol_ServerBroadcast::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatProtocol_ServerBroadcast>()._has_bits_);
  static void set_has_globalmessagereceived(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChatProtocol_ServerBroadcast::ChatProtocol_ServerBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatProtocol.ServerBroadcast)
}
ChatProtocol_ServerBroadcast::ChatProtocol_ServerBroadcast(const ChatProtocol_ServerBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  globalmessagereceived_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_globalmessagereceived()) {
    globalmessagereceived_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_globalmessagereceived(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat.ChatProtocol.ServerBroadcast)
}

void ChatProtocol_ServerBroadcast::SharedCtor() {
globalmessagereceived_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatProtocol_ServerBroadcast::~ChatProtocol_ServerBroadcast() {
  // @@protoc_insertion_point(destructor:chat.ChatProtocol.ServerBroadcast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatProtocol_ServerBroadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  globalmessagereceived_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatProtocol_ServerBroadcast::ArenaDtor(void* object) {
  ChatProtocol_ServerBroadcast* _this = reinterpret_cast< ChatProtocol_ServerBroadcast* >(object);
  (void)_this;
}
void ChatProtocol_ServerBroadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProtocol_ServerBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProtocol_ServerBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatProtocol.ServerBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    globalmessagereceived_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProtocol_ServerBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string GlobalMessageReceived = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_globalmessagereceived();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.ServerBroadcast.GlobalMessageReceived");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatProtocol_ServerBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatProtocol.ServerBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GlobalMessageReceived = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_globalmessagereceived().data(), static_cast<int>(this->_internal_globalmessagereceived().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.ServerBroadcast.GlobalMessageReceived");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_globalmessagereceived(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatProtocol.ServerBroadcast)
  return target;
}

size_t ChatProtocol_ServerBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatProtocol.ServerBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string GlobalMessageReceived = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_globalmessagereceived());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatProtocol_ServerBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatProtocol.ServerBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatProtocol_ServerBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatProtocol_ServerBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatProtocol.ServerBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatProtocol.ServerBroadcast)
    MergeFrom(*source);
  }
}

void ChatProtocol_ServerBroadcast::MergeFrom(const ChatProtocol_ServerBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatProtocol.ServerBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_globalmessagereceived()) {
    _internal_set_globalmessagereceived(from._internal_globalmessagereceived());
  }
}

void ChatProtocol_ServerBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatProtocol.ServerBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatProtocol_ServerBroadcast::CopyFrom(const ChatProtocol_ServerBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatProtocol.ServerBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProtocol_ServerBroadcast::IsInitialized() const {
  return true;
}

void ChatProtocol_ServerBroadcast::InternalSwap(ChatProtocol_ServerBroadcast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &globalmessagereceived_, GetArenaForAllocation(),
      &other->globalmessagereceived_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProtocol_ServerBroadcast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[5]);
}

// ===================================================================

class ChatProtocol_ServerPrivateMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatProtocol_ServerPrivateMessage>()._has_bits_);
  static void set_has_senderusername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChatProtocol_ServerPrivateMessage::ChatProtocol_ServerPrivateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatProtocol.ServerPrivateMessage)
}
ChatProtocol_ServerPrivateMessage::ChatProtocol_ServerPrivateMessage(const ChatProtocol_ServerPrivateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  senderusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_senderusername()) {
    senderusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_senderusername(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat.ChatProtocol.ServerPrivateMessage)
}

void ChatProtocol_ServerPrivateMessage::SharedCtor() {
senderusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatProtocol_ServerPrivateMessage::~ChatProtocol_ServerPrivateMessage() {
  // @@protoc_insertion_point(destructor:chat.ChatProtocol.ServerPrivateMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatProtocol_ServerPrivateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  senderusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatProtocol_ServerPrivateMessage::ArenaDtor(void* object) {
  ChatProtocol_ServerPrivateMessage* _this = reinterpret_cast< ChatProtocol_ServerPrivateMessage* >(object);
  (void)_this;
}
void ChatProtocol_ServerPrivateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProtocol_ServerPrivateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProtocol_ServerPrivateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatProtocol.ServerPrivateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      senderusername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProtocol_ServerPrivateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string SenderuserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_senderusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.ServerPrivateMessage.SenderuserName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.ServerPrivateMessage.Message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatProtocol_ServerPrivateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatProtocol.ServerPrivateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string SenderuserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_senderusername().data(), static_cast<int>(this->_internal_senderusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.ServerPrivateMessage.SenderuserName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_senderusername(), target);
  }

  // optional string Message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.ServerPrivateMessage.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatProtocol.ServerPrivateMessage)
  return target;
}

size_t ChatProtocol_ServerPrivateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatProtocol.ServerPrivateMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string SenderuserName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_senderusername());
    }

    // optional string Message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatProtocol_ServerPrivateMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatProtocol.ServerPrivateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatProtocol_ServerPrivateMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatProtocol_ServerPrivateMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatProtocol.ServerPrivateMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatProtocol.ServerPrivateMessage)
    MergeFrom(*source);
  }
}

void ChatProtocol_ServerPrivateMessage::MergeFrom(const ChatProtocol_ServerPrivateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatProtocol.ServerPrivateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_senderusername(from._internal_senderusername());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message(from._internal_message());
    }
  }
}

void ChatProtocol_ServerPrivateMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatProtocol.ServerPrivateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatProtocol_ServerPrivateMessage::CopyFrom(const ChatProtocol_ServerPrivateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatProtocol.ServerPrivateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProtocol_ServerPrivateMessage::IsInitialized() const {
  return true;
}

void ChatProtocol_ServerPrivateMessage::InternalSwap(ChatProtocol_ServerPrivateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &senderusername_, GetArenaForAllocation(),
      &other->senderusername_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProtocol_ServerPrivateMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[6]);
}

// ===================================================================

class ChatProtocol_ServerUserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatProtocol_ServerUserInfo>()._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChatProtocol_ServerUserInfo::ChatProtocol_ServerUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatProtocol.ServerUserInfo)
}
ChatProtocol_ServerUserInfo::ChatProtocol_ServerUserInfo(const ChatProtocol_ServerUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat.ChatProtocol.ServerUserInfo)
}

void ChatProtocol_ServerUserInfo::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatProtocol_ServerUserInfo::~ChatProtocol_ServerUserInfo() {
  // @@protoc_insertion_point(destructor:chat.ChatProtocol.ServerUserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatProtocol_ServerUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatProtocol_ServerUserInfo::ArenaDtor(void* object) {
  ChatProtocol_ServerUserInfo* _this = reinterpret_cast< ChatProtocol_ServerUserInfo* >(object);
  (void)_this;
}
void ChatProtocol_ServerUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProtocol_ServerUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProtocol_ServerUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatProtocol.ServerUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProtocol_ServerUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string UserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.ServerUserInfo.UserName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string IP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.ServerUserInfo.IP");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatProtocol_ServerUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatProtocol.ServerUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.ServerUserInfo.UserName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // optional string IP = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.ServerUserInfo.IP");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatProtocol.ServerUserInfo)
  return target;
}

size_t ChatProtocol_ServerUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatProtocol.ServerUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string UserName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string IP = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatProtocol_ServerUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatProtocol.ServerUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatProtocol_ServerUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatProtocol_ServerUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatProtocol.ServerUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatProtocol.ServerUserInfo)
    MergeFrom(*source);
  }
}

void ChatProtocol_ServerUserInfo::MergeFrom(const ChatProtocol_ServerUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatProtocol.ServerUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip(from._internal_ip());
    }
  }
}

void ChatProtocol_ServerUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatProtocol.ServerUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatProtocol_ServerUserInfo::CopyFrom(const ChatProtocol_ServerUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatProtocol.ServerUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProtocol_ServerUserInfo::IsInitialized() const {
  return true;
}

void ChatProtocol_ServerUserInfo::InternalSwap(ChatProtocol_ServerUserInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, GetArenaForAllocation(),
      &other->username_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProtocol_ServerUserInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[7]);
}

// ===================================================================

class ChatProtocol_ServerStatusChange::_Internal {
 public:
};

ChatProtocol_ServerStatusChange::ChatProtocol_ServerStatusChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatProtocol.ServerStatusChange)
}
ChatProtocol_ServerStatusChange::ChatProtocol_ServerStatusChange(const ChatProtocol_ServerStatusChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chat.ChatProtocol.ServerStatusChange)
}

void ChatProtocol_ServerStatusChange::SharedCtor() {
}

ChatProtocol_ServerStatusChange::~ChatProtocol_ServerStatusChange() {
  // @@protoc_insertion_point(destructor:chat.ChatProtocol.ServerStatusChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatProtocol_ServerStatusChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChatProtocol_ServerStatusChange::ArenaDtor(void* object) {
  ChatProtocol_ServerStatusChange* _this = reinterpret_cast< ChatProtocol_ServerStatusChange* >(object);
  (void)_this;
}
void ChatProtocol_ServerStatusChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProtocol_ServerStatusChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProtocol_ServerStatusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatProtocol.ServerStatusChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProtocol_ServerStatusChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatProtocol_ServerStatusChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatProtocol.ServerStatusChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatProtocol.ServerStatusChange)
  return target;
}

size_t ChatProtocol_ServerStatusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatProtocol.ServerStatusChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatProtocol_ServerStatusChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatProtocol.ServerStatusChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatProtocol_ServerStatusChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatProtocol_ServerStatusChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatProtocol.ServerStatusChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatProtocol.ServerStatusChange)
    MergeFrom(*source);
  }
}

void ChatProtocol_ServerStatusChange::MergeFrom(const ChatProtocol_ServerStatusChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatProtocol.ServerStatusChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChatProtocol_ServerStatusChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatProtocol.ServerStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatProtocol_ServerStatusChange::CopyFrom(const ChatProtocol_ServerStatusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatProtocol.ServerStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProtocol_ServerStatusChange::IsInitialized() const {
  return true;
}

void ChatProtocol_ServerStatusChange::InternalSwap(ChatProtocol_ServerStatusChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProtocol_ServerStatusChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[8]);
}

// ===================================================================

class ChatProtocol::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatProtocol>()._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ChatProtocol::ChatProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chat.ChatProtocol)
}
ChatProtocol::ChatProtocol(const ChatProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat.ChatProtocol)
}

void ChatProtocol::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChatProtocol::~ChatProtocol() {
  // @@protoc_insertion_point(destructor:chat.ChatProtocol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatProtocol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatProtocol::ArenaDtor(void* object) {
  ChatProtocol* _this = reinterpret_cast< ChatProtocol* >(object);
  (void)_this;
}
void ChatProtocol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChatProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string UserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.UserName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string IP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chat.ChatProtocol.IP");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatProtocol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChatProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.UserName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // required string IP = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "chat.ChatProtocol.IP");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChatProtocol)
  return target;
}

size_t ChatProtocol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.ChatProtocol)
  size_t total_size = 0;

  if (_internal_has_username()) {
    // required string UserName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (_internal_has_ip()) {
    // required string IP = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  return total_size;
}
size_t ChatProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChatProtocol)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string UserName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());

    // required string IP = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatProtocol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChatProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatProtocol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatProtocol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChatProtocol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChatProtocol)
    MergeFrom(*source);
  }
}

void ChatProtocol::MergeFrom(const ChatProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChatProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip(from._internal_ip());
    }
  }
}

void ChatProtocol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChatProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatProtocol::CopyFrom(const ChatProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChatProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProtocol::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChatProtocol::InternalSwap(ChatProtocol* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, GetArenaForAllocation(),
      &other->username_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatProtocol::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chat::ChatProtocol_UserSignIn* Arena::CreateMaybeMessage< ::chat::ChatProtocol_UserSignIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatProtocol_UserSignIn >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ChatProtocol_ClientBroadcast* Arena::CreateMaybeMessage< ::chat::ChatProtocol_ClientBroadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatProtocol_ClientBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ChatProtocol_ClientPrivateMessage* Arena::CreateMaybeMessage< ::chat::ChatProtocol_ClientPrivateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatProtocol_ClientPrivateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ChatProtocol_ClientStatusChange* Arena::CreateMaybeMessage< ::chat::ChatProtocol_ClientStatusChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatProtocol_ClientStatusChange >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ChatProtocol_ClientUserInfo* Arena::CreateMaybeMessage< ::chat::ChatProtocol_ClientUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatProtocol_ClientUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ChatProtocol_ServerBroadcast* Arena::CreateMaybeMessage< ::chat::ChatProtocol_ServerBroadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatProtocol_ServerBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ChatProtocol_ServerPrivateMessage* Arena::CreateMaybeMessage< ::chat::ChatProtocol_ServerPrivateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatProtocol_ServerPrivateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ChatProtocol_ServerUserInfo* Arena::CreateMaybeMessage< ::chat::ChatProtocol_ServerUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatProtocol_ServerUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ChatProtocol_ServerStatusChange* Arena::CreateMaybeMessage< ::chat::ChatProtocol_ServerStatusChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatProtocol_ServerStatusChange >(arena);
}
template<> PROTOBUF_NOINLINE ::chat::ChatProtocol* Arena::CreateMaybeMessage< ::chat::ChatProtocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat::ChatProtocol >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
